generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Categories {
  id                                                      Int             @id(map: "Categories_PK") @default(autoincrement())
  category_name                                           String          @db.VarChar(25)
  category_discount                                       Decimal?        @db.Decimal(10, 2)
  category_image                                          String?         @db.VarChar(100)
  cat_1C_id                                               Int             @unique(map: "Categories_UNIQUE")
  Products                                                Products[]
  Subcategories                                           Subcategories[]
  Subcategories_Subcategories_category_ref_1CToCategories Subcategories[] @relation("Subcategories_category_ref_1CToCategories")
}

model ComboProducts {
  main_product_id                                   Int
  child_product_id                                  Int
  combo_id                                          Int        @id(map: "ComboProducts_PK") @default(autoincrement())
  isActive                                          Boolean?   @default(false, map: "DF__ComboProd__isAct__13DCE752")
  Products_ComboProducts_main_product_idToProducts  Products   @relation("ComboProducts_main_product_idToProducts", fields: [main_product_id], references: [id], onUpdate: NoAction, map: "ComboProducts_Products_FK")
  Products_ComboProducts_child_product_idToProducts Products   @relation("ComboProducts_child_product_idToProducts", fields: [child_product_id], references: [id], onUpdate: NoAction, map: "ComboProducts_Products_FK_1")
  Products_Products_combo_idToComboProducts         Products[] @relation("Products_combo_idToComboProducts")
}

model Inventory {
  product_id      Int      @unique(map: "Inventory_UNIQUE")
  total_quantity  Decimal? @db.Decimal(10, 2)
  product_sale_id Int?
  Products        Products @relation(fields: [product_id], references: [id], onUpdate: NoAction, map: "Inventory_Products_FK")
}

model LoadProducts {
  id                                          Int              @id(map: "LoadProducts_PK") @default(autoincrement())
  product_id                                  Int?
  load_date                                   DateTime?        @db.Date
  load_quantity                               Decimal?         @db.Decimal(10, 2)
  lotIsActive                                 Boolean?         @default(false, map: "DF__LoadProdu__lotIs__7F80E8EA")
  products_left                               Decimal?         @db.Decimal(10, 2)
  sale_id                                     Int?             @default(0, map: "DF__LoadProdu__sale___76818E95")
  child_product_barcode                       String?          @db.VarChar(256)
  Products_LoadProducts_product_idToProducts  Products?        @relation("LoadProducts_product_idToProducts", fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "LoadProducts_Products_FK")
  Sales                                       Sales?           @relation(fields: [sale_id], references: [sale_custom_id], onDelete: NoAction, onUpdate: NoAction, map: "LoadProducts_Sales_FK")
  Products_Products_product_lotToLoadProducts Products[]       @relation("Products_product_lotToLoadProducts")
  RemoveProducts                              RemoveProducts[]
}

model Products {
  id                                                     Int              @id(map: "Products_PK") @default(autoincrement())
  product_name                                           String?          @db.VarChar(256)
  product_code                                           String?          @db.VarChar(256)
  barcode                                                String?          @unique(map: "Products_UNIQUE") @db.VarChar(256)
  measure                                                String?          @db.VarChar(64)
  product_name_ru                                        String?          @db.VarChar(256)
  product_name_ua                                        String?          @db.VarChar(256)
  product_description                                    String?          @db.VarChar(256)
  good_category                                          String?          @db.VarChar(256)
  product_category_old                                   Int?
  product_subcategory_old                                Int?
  product_left                                           Decimal?         @default(0, map: "DF__Products__produc__65F62111") @db.Decimal(10, 2)
  product_image                                          String?          @db.VarChar(255)
  product_price                                          Decimal?         @db.Decimal(10, 2)
  product_discount                                       Decimal?         @db.Decimal(10, 2)
  product_rating                                         Decimal?         @db.Decimal(10, 2)
  product_lot                                            Int?
  exposition_term                                        Int?
  sale_id                                                Int?
  discount_price_1                                       Decimal?         @db.Decimal(10, 2)
  discount_price_2                                       Decimal?         @db.Decimal(10, 2)
  discount_price_3                                       Decimal?         @db.Decimal(10, 2)
  updatedAt                                              DateTime?        @db.DateTime
  combo_id                                               Int?
  product_category                                       Int?
  product_subcategory                                    Int?
  ComboProducts_ComboProducts_main_product_idToProducts  ComboProducts[]  @relation("ComboProducts_main_product_idToProducts")
  ComboProducts_ComboProducts_child_product_idToProducts ComboProducts[]  @relation("ComboProducts_child_product_idToProducts")
  Inventory                                              Inventory?
  LoadProducts_LoadProducts_product_idToProducts         LoadProducts[]   @relation("LoadProducts_product_idToProducts")
  Categories                                             Categories?      @relation(fields: [product_category], references: [cat_1C_id], onDelete: NoAction, onUpdate: NoAction, map: "Products_Categories_FK")
  ComboProducts_Products_combo_idToComboProducts         ComboProducts?   @relation("Products_combo_idToComboProducts", fields: [combo_id], references: [combo_id], onUpdate: NoAction, map: "Products_ComboProducts_FK")
  LoadProducts_Products_product_lotToLoadProducts        LoadProducts?    @relation("Products_product_lotToLoadProducts", fields: [product_lot], references: [id], onUpdate: NoAction, map: "Products_LoadProducts_FK")
  Sales                                                  Sales?           @relation(fields: [sale_id], references: [sale_custom_id], onDelete: NoAction, onUpdate: NoAction, map: "Products_Sales_FK")
  Subcategories                                          Subcategories?   @relation(fields: [product_subcategory], references: [subcat_1C_id], onDelete: NoAction, onUpdate: NoAction, map: "Products_Subcategories_FK")
  RemoveProducts                                         RemoveProducts[]
  Transactions                                           Transactions[]
}

model RemoveProducts {
  id              Int           @id(map: "RemoveProducts_PK") @default(autoincrement())
  product_id      Int?
  remove_date     DateTime?     @db.DateTime
  remove_quantity Decimal?      @db.Decimal(10, 2)
  remove_type_id  Int?
  remove_cost     Decimal?      @db.Decimal(10, 2)
  isActive        Boolean?      @default(false, map: "DF__RemovePro__isAct__0E04126B")
  load_id         Int?
  amount          Decimal?      @db.Decimal(8, 2)
  approvalCode    String?       @db.VarChar(100)
  bankAcquirer    String?       @db.VarChar(100)
  date            String?       @db.NVarChar(64)
  discount        Decimal?      @db.Decimal(8, 2)
  method          String?       @db.VarChar(64)
  pan             String?       @db.VarChar(64)
  paymentSystem   String?       @db.VarChar(100)
  responseCode    String?       @db.VarChar(64)
  rrn             String?       @db.VarChar(100)
  rrnExt          String?       @db.VarChar(100)
  subMerchant     String?       @db.VarChar(100)
  time            String?       @db.NVarChar(64)
  LoadProducts    LoadProducts? @relation(fields: [load_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "RemoveProducts_LoadProducts_FK")
  Products        Products?     @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "RemoveProducts_Products_FK")
  RemoveTypes     RemoveTypes?  @relation(fields: [remove_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "RemoveProducts_RemoveTypes_FK")
}

model RemoveTypes {
  id             Int              @id(map: "RemoveTypes_PK") @default(autoincrement())
  type_name      String?          @db.VarChar(20)
  type_name_ua   String?          @db.VarChar(20)
  RemoveProducts RemoveProducts[]
}

model Sales {
  id               Int            @id(map: "Sales_PK") @default(autoincrement())
  sale_name        String         @db.NVarChar(128)
  sale_discount_1  Decimal?       @db.Decimal(2, 2)
  sale_discount_2  Decimal?       @db.Decimal(2, 2)
  sale_discount_3  Decimal?       @db.Decimal(2, 2)
  sale_description String?        @db.NVarChar(256)
  sale_custom_id   Int?           @unique(map: "Sales_UNIQUE")
  LoadProducts     LoadProducts[]
  Products         Products[]
}

model Store {
  id         Int     @id(map: "Store_PK") @default(autoincrement())
  auth_id    String  @unique(map: "Store_UNIQUE") @db.VarChar(50)
  store_name String? @db.VarChar(100)
  password   String? @db.VarChar(200)
  token      String? @db.VarChar(200)
  role       String? @db.VarChar(100)
}

model Subcategories {
  id                                                   Int        @id(map: "Subcategories_PK") @default(autoincrement())
  subcategory_name                                     String?    @db.VarChar(100)
  category_ref                                         Int
  subcategory_discount                                 Decimal?   @db.Decimal(10, 2)
  subcat_1C_id                                         Int?       @unique(map: "Subcategories_UNIQUE")
  category_ref_1C                                      Int
  Products                                             Products[]
  Categories                                           Categories @relation(fields: [category_ref], references: [id], onUpdate: NoAction, map: "Subcategories_Categories_FK")
  Categories_Subcategories_category_ref_1CToCategories Categories @relation("Subcategories_category_ref_1CToCategories", fields: [category_ref_1C], references: [cat_1C_id], onUpdate: NoAction, map: "Subcategories_Categories_FK_by_1C")
}

model Transactions {
  id              Int       @id(map: "Transactions_PK") @default(autoincrement())
  upload_date     DateTime? @db.Date
  product_id      Int?
  upload_quantity Decimal?  @db.Decimal(10, 2)
  left_quantity   Decimal?  @db.Decimal(10, 2)
  isActiveLot     Boolean?  @default(false, map: "DF__Transacti__isAct__4EA8A765")
  Products        Products? @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Transactions_Products_FK")
}
